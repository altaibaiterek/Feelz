from aiogram import Router, F

from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from django.db import IntegrityError

from apps.account.models import StudentGroup
from apps.bot.modules.managment.keyboards import back_to_group_button
from apps.bot.modules.managment.states import AddLessonFSM
from apps.education.models import Lesson, Task


managment_router = Router(name="Managment menu")


@managment_router.callback_query(F.data.startswith("add_lesson_to_group_"))
async def add_lesson_view(
        callback: CallbackQuery,
        state: FSMContext
) -> None:
    group_id = callback.data.split("add_lesson_to_group_")[1]

    await state.update_data(group_id=group_id)

    await callback.answer('üìö –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è')

    await callback.message.answer(
        'üîñ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞*, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã:'
    )

    await state.set_state(AddLessonFSM.waiting_for_lesson_name)


@managment_router.message(AddLessonFSM.waiting_for_lesson_name)
async def input_lesson_name(
    message: Message,
    state: FSMContext
) -> None:
    lesson_name = message.text

    await state.update_data(lesson_name=lesson_name)

    await message.answer(
        f'üìã –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ *¬´{lesson_name}¬ª* –ø—Ä–∏–Ω—è—Ç–æ!\n\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ *–æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞* –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:'
    )

    await state.set_state(AddLessonFSM.waiting_for_lesson_description)


@managment_router.message(AddLessonFSM.waiting_for_lesson_description)
async def input_lesson_description(
    message: Message,
    state: FSMContext
) -> None:
    lesson_description = message.text

    await state.update_data(lesson_description=lesson_description)

    await message.answer(
        'üìö –û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ *—Å–ª–æ–≤–∞ –∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ*, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã—É—á–∏—Ç—å –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:'
    )

    await state.set_state(AddLessonFSM.waiting_for_task)


@managment_router.message(AddLessonFSM.waiting_for_task)
async def input_lesson_task(
    message: Message,
    state: FSMContext
) -> None:
    task_body = message.text

    data = await state.get_data()
    lesson_name = data['lesson_name']
    lesson_description = data['lesson_description']
    group_id = data['group_id']

    try:
        group = await StudentGroup.objects.aget(id=group_id)

        lesson = Lesson(
            student_group=group,
            topic=lesson_name,
            body=lesson_description
        )
        await lesson.asave()

        task = Task(
            lesson=lesson,
            body=task_body
        )
        await task.asave()

        await message.answer(
            f"üéâ *–£—Ä–æ–∫ ¬´{lesson_name}¬ª* –∏ –∑–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è –≥—Ä—É–ø–ø—ã *{group.name}*! \n\n"
            f"üìñ _–û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞:_\n{lesson_description}\n\n"
            f"üìù _–ó–∞–¥–∞–Ω–∏–µ:_\n{task_body}\n\n"
            "‚ú® *–£—Å–ø–µ—Ö!* –£—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.",
            reply_markup=await back_to_group_button(group_id)
        )

    except StudentGroup.DoesNotExist:
        await message.answer(
            "‚ùå *–û—à–∏–±–∫–∞:* –ì—Ä—É–ø–ø–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
    except IntegrityError:
        await message.answer(
            "‚ùå *–û—à–∏–±–∫–∞:* –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫ –∏ –∑–∞–¥–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö."
        )

    await state.clear()
